@model ProductDisplayModel
@{
    ViewData["Title"] = "Our Products";

    Pager pager = new Pager();

    int pageNumber = 0;

    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNumber = pager.CurrentPage;
    }
}

<!-- Hero Banner -->
<div class="card hero-banner mb-5">
    <div class="container h-100 d-flex align-items-center">
        <div class="text-white text-center mx-auto">
            <h1 class="display-1 fw-bold">TechXpress</h1>
            <p class="lead">Discover the latest tech gadgets at unbeatable prices</p>
        </div>
    </div>
</div>

<div class="container">
    <!-- Filter Section -->
    <div class="card shadow-sm mb-5">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-filter me-2"></i>Filter Products</h5>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                <div class="col-md-3">
                    <label class="form-label" for="categoryId">Category</label>
                    <select class="form-select" id="categoryId" name="categoryId">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categorys)
                        {
                            <option selected="@(category.Id == Model.CategoryId)" value="@category.Id">@category.CategoryName</option>
                        }
                    </select>
                </div>

                <div class="col-md-3">
                    <label class="form-label" for="sterm">Search</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" value="@Model.STerm" id="sterm" name="sterm" placeholder="Product name">
                    </div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Price Range</label>
                    <div class="d-flex align-items-center">
                        <input type="number" min="0" step="10" class="form-control price-min" name="minPrice"
                        placeholder="Min" value="@Model.MinPrice" id="minPriceInput">
                        <span class="mx-2">to</span>
                        <input type="number" min="@Model.MinPrice" step="10" class="form-control price-max" name="maxPrice"
                        placeholder="Max" value="@Model.MaxPrice" id="maxPriceInput">
                    </div>
                </div>

                <div class="col-md-3">
                    <label class="form-label" for="sortBy">Sort By</label>
                    <select class="form-select" id="sortBy" name="sortBy">
                        <option value="">Default</option>
                        <option selected="@(Model.SortBy == "name_asc")" value="name_asc">Name (A-Z)</option>
                        <option selected="@(Model.SortBy == "name_desc")" value="name_desc">Name (Z-A)</option>
                        <option selected="@(Model.SortBy == "price_asc")" value="price_asc">Price (Low to High)</option>
                        <option selected="@(Model.SortBy == "price_desc")" value="price_desc">Price (High to Low)</option>
                    </select>
                </div>

                <div class="col-12 text-end">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="fas fa-filter me-1"></i> Apply Filters
                    </button>
                    <a href="/Home/Index" class="btn btn-outline-secondary">
                        <i class="fas fa-sync-alt me-1"></i> Reset
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- Product Count & View Toggle -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="text-muted">
            Showing <span class="fw-bold">@Model.Products.Count()</span> products
        </div>
        <div class="view-options">
            <button class="btn btn-sm btn-outline-secondary active" id="gridViewBtn" title="Grid View">
                <i class="fas fa-th"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" id="listViewBtn" title="List View">
                <i class="fas fa-list"></i>
            </button>
        </div>
    </div>

    <!-- Products Grid View -->
    <div class="row" id="productsGridView">
        @foreach (var product in Model.Products)
        {
            <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
                <div class="card h-100 product-card">
                    <div class="badge-container">
                        @if (product.Quantity > 0 && product.Price < 500)
                        {
                            <span class="badge bg-success">Great Deal</span>
                        }
                        @if (product.Quantity <= 0)
                        {
                            <span class="badge bg-danger">Out of Stock</span>
                        }
                        else if (product.Quantity < 10)
                        {
                            <span class="badge bg-warning text-dark">Low Stock</span>
                        }
                    </div>

                    <div class="product-image-container">
                        @if (string.IsNullOrEmpty(product.Image))
                        {
                            <img src="/images/NoImage.png" onclick="showProductDetails(@product.Id)" class="card-img-top" alt="@product.ProductName">
                        }
                        else
                        {
                            <img src="/images/@product.Image" onclick="showProductDetails(@product.Id)" class="card-img-top" alt="@product.ProductName">
                        }
                        <div class="quick-view" onclick="showProductDetails(@product.Id)">
                            <i class="fas fa-eye"></i> Quick View
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title mb-0 cursor-pointer" onclick="showProductDetails(@product.Id)">
                                @product.ProductName
                            </h5>
                        </div>

                        <div class="product-meta mb-2">
                            <span class="badge bg-light text-dark">@product.CategoryName</span>
                            <div class="rating small text-warning">
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star-half-alt"></i>
                                <span class="text-muted small ms-1">(24)</span>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mt-auto">
                            <div>
                                <span class="h5 text-primary">$@product.Price</span>
                                @if (product.Price > 500)
                                {
                                    <small class="text-success d-block">Free Shipping</small>
                                }
                            </div>

                            @if (product.Quantity > 0)
                            {
                                <button type="button" onclick="add(@product.Id)" class="btn btn-primary btn-sm add-to-cart">
                                    <i class="fas fa-cart-plus me-1"></i> Add
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Products List View -->
    <div class="d-none" id="productsListView">
        @foreach (var product in Model.Products)
        {   
            <div class="card mb-3 product-list-card">
                <div class="row g-0">
                    <div class="col-md-3">
                        <div class="product-image-container-list cursor-pointer" onclick="showProductDetails(@product.Id)">
                            @if (string.IsNullOrEmpty(product.Image))
                            {
                                <img src="/images/NoImage.png" class="img-fluid rounded-start" alt="@product.ProductName">
                            }
                            else
                            {
                                <img src="/images/@product.Image" class="img-fluid rounded-start" alt="@product.ProductName">
                            }
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title cursor-pointer" onclick="showProductDetails(@product.Id)">
                                        @product.ProductName
                                    </h5>
                                    <div class="mb-2">
                                        <span class="badge bg-light text-dark">@product.CategoryName</span>
                                        <div class="rating small text-warning d-inline-block ms-2">
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star"></i>
                                            <i class="fas fa-star-half-alt"></i>
                                            <span class="text-muted small ms-1">(24)</span>
                                        </div>
                                    </div>
                                    <p class="card-text mt-2 text-muted">@product.Description</p>
                                    
                                </div>
                                <div class="text-end">
                                    <div class="h4 text-primary mb-3">$@product.Price</div>
                                    @if (product.Quantity > 0)
                                    {
                                        <button type="button" onclick="add(@product.Id)" class="btn btn-primary me-2">
                                            <i class="fas fa-cart-plus me-1"></i> Add to Cart
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="pagination">
        @if (pager.TotalPages > 0)
        {
            <nav aria-label="Product pagination" class="w-100 mt-5">
                <ul class="pagination justify-content-center">
                    @if (pager.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-controller="Home" asp-action="Index" asp-route-pg="1"><i class="fas fa-angle-left me-1"></i> First</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" asp-controller="Home" asp-action="Index" asp-route-pg="@(pager.CurrentPage - 1)"><i class="fas fa-angle-double-left me-1"></i> Previous</a>
                        </li>
                    }
                    @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
                    {
                        <li class="page-item @(pge == pager.CurrentPage ? "active" : "")">
                            <a class="page-link" asp-controller="Home" asp-action="Index" asp-route-pg="@pge">@pge</a>
						</li>
                    }
                    @if (pager.CurrentPage < pager.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-controller="Home" asp-action="Index" asp-route-pg="@(pager.CurrentPage + 1)"><i class="fas fa-angle-double-right me-1"></i> Next</a>
                        </li>

                        <li class="page-item">
                            <a class="page-link" asp-controller="Home" asp-action="Index" asp-route-pg="@pager.TotalPages"><i class="fas fa-angle-right me-1"></i> Last</a>
                        </li>
                    }
                    
                    
                </ul>
            </nav>
        }
    </div>
</div>

<!-- Product Details Dialog -->
<dialog id="productDialog" class="dialog-container">
    <div class="dialog-content">
        <div class="dialog-header">
            <h3 id="dialogTitle">Product Details</h3>
            <button onclick="closeDialog()" class="btn btn-outline-secondary">
                <i class="fas fa-times me-1"></i> Close
            </button>
        </div>
        <div class="dialog-body" id="dialogContent">

        </div>
        <div class="dialog-footer">
            <button id="dialogAddToCartBtn" class="btn btn-primary">
                <i class="fas fa-cart-plus me-1"></i> Add to Cart
            </button>
        </div>
    </div>
</dialog>


@section Scripts {
    <script>
        // Initialize price range slider
        document.addEventListener('DOMContentLoaded', function() {
            const minPriceInput = document.getElementById('minPriceInput');
            const maxPriceInput = document.getElementById('maxPriceInput');

            // Update max price input's min attribute when min price changes
            minPriceInput.addEventListener('input', function() {
                const minValue = parseFloat(this.value) || 0;
                maxPriceInput.min = minValue;

                if (parseFloat(maxPriceInput.value) < minValue) {
                    maxPriceInput.value = minValue;
                }
            });

            // Initialize min attribute on page load
            maxPriceInput.min = parseFloat(minPriceInput.value) || 0;

            // View toggle functionality
            const gridViewBtn = document.getElementById('gridViewBtn');
            const listViewBtn = document.getElementById('listViewBtn');
            const gridView = document.getElementById('productsGridView');
            const listView = document.getElementById('productsListView');

            gridViewBtn.addEventListener('click', function() {
                this.classList.add('active');
                listViewBtn.classList.remove('active');
                gridView.classList.remove('d-none');
                listView.classList.add('d-none');
            });

            listViewBtn.addEventListener('click', function() {
                this.classList.add('active');
                gridViewBtn.classList.remove('active');
                listView.classList.remove('d-none');
                gridView.classList.add('d-none');
            });
        });

        // Toastr configuration
        toastr.options = {
            positionClass: "toast-top-right",
            preventDuplicates: true,
            progressBar: true,
            timeOut: 2000,
            closeButton: true,
            newestOnTop: true
        };

        // Add to cart function
        async function add(productId, quantity = 1) {
            try {
                var response = await fetch(`/Cart/AddItem?productId=${productId}&quantity=${quantity}`);
                if (response.status === 401) {
                    window.location.href = "/Identity/Account/Login";
                    return;
                }
                if (response.status == 200) {
                    var result = await response.json();
                    var cartCountEl = document.getElementById("cartCount");
                    cartCountEl.innerHTML = result;

                    toastr.success('Product added to cart successfully!');

                    const cartIcon = document.querySelector('.fa-shopping-cart');
                    if (cartIcon) {
                        cartIcon.parentElement.classList.add('animate__animated', 'animate__tada');
                        setTimeout(() => {
                            cartIcon.parentElement.classList.remove('animate__animated', 'animate__tada');
                        }, 1000);
                    }
                } else {
                    toastr.error('Failed to add product to cart');
                }
            }
            catch (err) {
                console.log(err);
                toastr.error('An error occurred while adding to cart');
            }
        }

        // Dialog functions
        function showDialog() {
            const dialog = document.getElementById('productDialog');
            dialog.showModal();
        }

        function closeDialog() {
            const dialog = document.getElementById('productDialog');
            dialog.close();
        }

        // Product details function
        async function showProductDetails(productId) {
            try {
        const dialogContent = document.getElementById('dialogContent');
        dialogContent.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading product details...</p>
            </div>`;

        showDialog();

        const response = await fetch(`/Home/GetProductDetails?id=${productId}`);

        if (!response.ok) {
            throw new Error(await response.text() || 'Failed to load product');
        }

        const product = await response.json();

        if (!product) {
            throw new Error('Product not found');
        }


                dialogContent.innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <div class="product-gallery">
                                <img src="/images/${product.image || 'NoImage.png'}"
                                     class="img-fluid rounded mb-3"
                                     alt="${product.productName}"
                                     style="max-height: 300px; object-fit: contain;">
                            </div>
                            <div class="product-details">
                                <h5 class="mb-3">Product Features</h5>
                                <p>
                                - Good Quality<br />- Original<br />- Power Efficient<br />- 3-Year Warranty<br />
                                </p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h3 class="product-title">${product.productName}</h3>

                            <div class="d-flex align-items-center mb-3">
                                <div class="rating text-warning me-3">
                                    ${'<i class="fas fa-star"></i>'.repeat(4)}<i class="fas fa-star-half-alt"></i>
                                </div>
                                <span class="text-muted">24 reviews</span>
                            </div>

                            <div class="price-container mb-3">
                                <span class="h3 text-primary">$${product.price}</span>
                                ${product.price > 500 ? '<span class="badge bg-success ms-2">Free Shipping</span>' : ''}
                            </div>

                            <div class="availability mb-4">
                                <strong>Availability:</strong>
                                ${product.quantity > 0
                                    ? `<span class="text-success">In Stock (${product.quantity} available)</span>`
                                    : '<span class="text-danger">Out of Stock</span>'}
                            </div>

                            <div class="product-meta mb-4">
                                <p><strong>Category:</strong> ${product.categoryName}</p>
                                <p><strong>Product ID:</strong> ${product.id}</p>
                            </div>

                                <div class="product-actions mb-4">
            <div class="input-group mb-3" style="max-width: 150px;">
                <button class="btn btn-outline-secondary" type="button" onclick="adjustQuantity(-1)">-</button>
                <input type="number" id="productQuantity" class="form-control text-center" value="1" min="1">
                <button class="btn btn-outline-secondary" type="button" onclick="adjustQuantity(1)">+</button>
            </div>
        </div>

                            <div class="d-flex flex-wrap gap-2">
                                <button type="button" class="btn btn-primary flex-grow-1"
                                        onclick="addToCartFromModal(${product.id})"
                                        ${product.quantity <= 0 ? 'disabled' : ''}>
                                    <i class="fas fa-cart-plus me-2"></i> Add to Cart
                                </button>
                            </div>

                            <hr class="my-4">

                            <div class="product-details">
                                <h5 class="mb-3">Product Description</h5>
                                <p>${product.description || 'No description available.'}</p>
                            </div>
                        </div>
                    </div>`;

                const addToCartBtn = document.getElementById('dialogAddToCartBtn');
                if (product.Quantity > 0) {
                    addToCartBtn.style.display = 'inline-block';
                    addToCartBtn.onclick = function() {
                        addToCartFromModal(product.id);
                        closeDialog();
                    };
                } else {
                    addToCartBtn.style.display = 'none';
                }

                } catch (error) {
            console.error('Error loading product details:', error);
            document.getElementById('dialogContent').innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    ${error.message || 'Failed to load product details. Please try again later.'}
                </div>`;
        }
        }

        // Helper functions
            function adjustQuantity(change) {
            const quantityInput = document.getElementById('productQuantity');
            let quantity = parseInt(quantityInput.value) || 1;
            quantity = Math.max(1, quantity + change);
            quantityInput.value = quantity;
            return quantity;  // Return the new quantity
        }

            async function addToCartFromModal(productId) {
            const quantity = parseInt(document.getElementById('productQuantity').value) || 1;
            try {
                const response = await fetch(`/Cart/AddItem?productId=${productId}&quantity=${quantity}`);
                if (response.status === 401) {
                    window.location.href = "/Identity/Account/Login";
                    return;
                }
                if (response.ok) {
                    const result = await response.json();
                    document.getElementById("cartCount").innerHTML = result;
                    toastr.success(`Added ${quantity} item(s) to cart`);
                    closeDialog();
                } else {
                    toastr.error('Failed to add to cart');
                }
            } catch (err) {
                console.error('Add to cart error:', err);
                toastr.error('Error adding to cart');
            }

        }

    </script>
}