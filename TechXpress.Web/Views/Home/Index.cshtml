@model ProductDisplayModel
@{
}

<!-- Add these to your _Layout.cshtml head section -->

<div class="filter-section">
    <form asp-action="Index" method="get" class="row g-3">
        <!-- Search and Category Filters (existing) -->
        <div class="col-md-3">
            <label class="form-label" for="categoryId">Category</label>
            <select class="form-select" id="categoryId" name="categoryId">
                <option value="">All Categories</option>
                @foreach (var category in Model.Categorys)
                {
                    <option selected="@(category.Id == Model.CategoryId)" value="@category.Id">@category.CategoryName</option>
                }
            </select>
        </div>

        <div class="col-md-3">
            <label class="form-label" for="sterm">Search</label>
            <div class="input-group">
                <input type="text" class="form-control" value="@Model.STerm" id="sterm" name="sterm" placeholder="Product name">
            </div>
        </div>

        <!-- New Price Range Filter -->
        <div class="col-md-3">
            <label class="form-label">Price Range</label>
            <div class="d-flex align-items-center">
                <input type="number" step="0.01" class="form-control" name="minPrice"
                       placeholder="Min" value="@Model.MinPrice">
                <span class="mx-2">to</span>
                <input type="number" step="0.01" class="form-control" name="maxPrice"
                       placeholder="Max" value="@Model.MaxPrice">
            </div>
        </div>

        <!-- New Sort By Dropdown -->
        <div class="col-md-3">
            <label class="form-label" for="sortBy">Sort By</label>
            <select class="form-select" id="sortBy" name="sortBy">
                <option value="">Default</option>
                <option selected="@(Model.SortBy == "name_asc")" value="name_asc">Name (A-Z)</option>
                <option selected="@(Model.SortBy == "name_desc")" value="name_desc">Name (Z-A)</option>
                <option selected="@(Model.SortBy == "price_asc")" value="price_asc">Price (Low to High)</option>
                <option selected="@(Model.SortBy == "price_desc")" value="price_desc">Price (High to Low)</option>
            </select>
        </div>

        <div class="col-12">
            <button type="submit" class="btn btn-primary me-2">Apply Filters</button>
            <a href="/Home/Index" class="btn btn-outline-secondary">Reset</a>
        </div>
    </form>
</div>

<!-- Product Details Modal (existing) -->
<div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productDetailsModalLabel">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="productDetailsContent">
                <!-- Content will be loaded here dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="modalAddToCartBtn" class="btn btn-primary">Add to Cart</button>
            </div>
        </div>
    </div>
</div>

<!-- Product Grid (existing) -->
<div class="w-100 mt-4 d-flex flex-wrap">
    @foreach (var product in Model.Products)
    {
        <div class="card mx-3 mb-4" style="width: 11rem;">
            @if (string.IsNullOrEmpty(product.Image))
            {
                <img style="width:100%;height:180px; object-fit: contain" src="/images/NoImage.png" class="card-img-top" alt="@product.ProductName">
            }
            else
            {
                <img style="width:100%;height:180px; object-fit: contain" src="/images/@product.Image" class="card-img-top" alt="@product.ProductName">
            }
            <div class="card-body d-flex flex-column" style="height: 200px;">
                <div>
                    <h5 class="card-title" style="font-size: 1rem; height: 2.5rem; overflow: hidden; text-overflow: ellipsis; cursor: pointer;"
                        onclick="showProductDetails(@product.Id)">
                        @product.ProductName
                    </h5>
                    <p class="card-text mb-2">
                        <small><b>Category: </b>@product.CategoryName</small><br />
                        <small><b>Price: </b>@product.Price$</small><br />
                        <small><b>Quantity: </b>@product.Quantity</small>
                    </p>
                </div>
                <div class="mt-auto">
                    @if (product.Quantity > 0)
                    {
                        <button type="button" onclick="add(@product.Id)"
                                data-product-id="@product.Id"
                                class="btn btn-primary w-100">
                            Add to cart
                        </button>
                    }
                    else
                    {
                        <span style="border: 1px solid;padding: 5px 8px;color: red;border-radius: 5px; display: block; text-align: center;">Out of stock</span>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Initialize price range slider
        document.addEventListener('DOMContentLoaded', function() {
            const priceSlider = document.getElementById('priceRangeSlider');
            if (priceSlider) {
                noUiSlider.create(priceSlider, {
                    start: [@(Model.MinPrice ?? 0), @(Model.MaxPrice ?? 1000)],
                    connect: true,
                    range: {
                        'min': 0,
                        'max': 1000
                    },
                    step: 10
                });

                priceSlider.noUiSlider.on('update', function(values, handle) {
                    document.getElementById('minPrice').value = Math.round(values[0]);
                    document.getElementById('maxPrice').value = Math.round(values[1]);
                });
            }
        });

        // Existing Toastr and add to cart functions
        toastr.options = {
            positionClass: "toast-top-right",
            preventDuplicates: true,
            progressBar: true,
            timeOut: 2000,
            closeButton: true
        };

        async function add(productId) {
             var usernameEl = document.getElementById("username");
            if(usernameEl == null) {
                window.location.href = "/Identity/Account/Login";
                return;
            }

            try {
                var response = await fetch(`/Cart/AddItem?productId=${productId}`);
                if (response.status == 200) {
                    var result = await response.json();
                    var cartCountEl = document.getElementById("cartCount");
                    cartCountEl.innerHTML = result;

                    toastr.success('Product added to cart successfully!');
                    window.location.href = "#cartCount";
                } else {
                    toastr.error('Failed to add product to cart');
                }
            }
            catch (err) {
                console.log(err);
                toastr.error('An error occurred while adding to cart');
            }
        }

        function showProductDetails(productId) {
            // Find the product card
            const productCard = document.querySelector(`[data-product-id="${productId}"]`).closest('.card');

            // Extract product details
            const productName = productCard.querySelector('.card-title').textContent.trim();
            const imageSrc = productCard.querySelector('.card-img-top').src;
            const category = productCard.querySelector('p.card-text small:nth-of-type(1)').textContent.replace('Category: ', '').trim();
            const price = productCard.querySelector('p.card-text small:nth-of-type(2)').textContent.replace('Price: ', '').trim();
            const quantity = productCard.querySelector('p.card-text small:nth-of-type(3)').textContent.replace('Quantity: ', '').trim();

            // Generate product description (lorem ipsum)
            const description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";

            // Build modal content
            const modalContent = `
                <div class="row">
                    <div class="col-md-6">
                        <img src="${imageSrc}" class="product-details-img img-fluid" alt="${productName}">
                    </div>
                    <div class="col-md-6">
                        <h4>${productName}</h4>
                        <p><strong>Category:</strong> ${category}</p>
                        <p><strong>Price:</strong> ${price}</p>
                        <p><strong>Availability:</strong> ${quantity > 0 ? 'In Stock' : 'Out of Stock'}</p>
                        <hr>
                        <h5>Product Description</h5>
                        <p>${description}</p>
                        <h5 class="mt-3">Features</h5>
                        <ul>
                            <li>High-quality materials</li>
                            <li>Manufacturer warranty</li>
                            <li>Easy to use</li>
                            <li>Energy efficient</li>
                        </ul>
                    </div>
                </div>
            `;

            // Set modal content
            document.getElementById('productDetailsContent').innerHTML = modalContent;

            // Set up Add to Cart button in modal
            const addToCartBtn = document.getElementById('modalAddToCartBtn');
            if (parseInt(quantity) > 0) {
                addToCartBtn.style.display = 'block';
                addToCartBtn.onclick = function() {
                    add(productId);
                    bootstrap.Modal.getInstance(document.getElementById('productDetailsModal')).hide();
                };
            } else {
                addToCartBtn.style.display = 'none';
            }

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
            modal.show();
        }
    </script>
}